name: Windows-CI
on: [push, pull_request]
env:
  QT_INSTALL_VERSION: '5.14.2'
  vcpkgResponseFile: '${{ github.workspace }}\.github\workflows-support\response_file.txt'
  vcpkgGitCommitID: '28ab0b15cd7cdc1004cac9a28a5ecab198c161b9' # Updated 26/04/2020

jobs:
   windows-msvc:
    strategy:
      matrix:
        arch: [x64] #[Win32, x64]
        qt64: [win64_msvc2017_64] # [win64_mingw73, win64_msvc2017_64]
        env-bit: [64] #[64, 32]
        triplet: [x64-windows] #[x64-windows, x86-windows]
#       qt32: [win32_msvc2015, win32_mingw53] // For now we don't build on Win32
#       platforms: [x64] #[x64, x86]
        python-version: [3.8.0] #[3.6, 3.7]
        python-platform: [amd64] #[amd64, ""]
    runs-on: windows-latest
    steps:
      - name: Export shell environment variables
        uses: lukka/set-shell-env@v1.0
        with:
          PreferredToolArchitecture: '${{matrix.arch}}'
          PYTHON_INSTALL_DIR: '${{ runner.workspace }}\deps\Python${{ matrix.python-version }}-${{ matrix.python-platform }}-dbg'

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache (Qt)
        uses: actions/cache@v1.1.2
        id: cache-qt
        with:
          path: '../Qt'
          key: '${{ runner.os }}-QtCache-${{ env.QT_INSTALL_VERSION }}'

      - name: Cache (Python)
        uses: actions/cache@v1.1.2
        id: cache-python
        with:
          path: '${{ env.PYTHON_INSTALL_DIR }}\'
          key: '${{ runner.os }}-PythonCache-v${{ matrix.python-version }}-${{ matrix.python-platform }}-dbg'

      # TODO: Set hashFiles to: .github/workflows/windows-ci.yml
      - name: Cache (Choco)
        uses: actions/cache@v1.1.2
        id: cache-choco
        with:
          path: 'C:\ProgramData\chocolatey\lib\winflexbison3'
          key: ${{ runner.os }}-ChocoCache-${{ hashFiles('.github/workflows-support/response_file.txt') }}

      # Pinned CMake here
      - name: Install pinned CMake Version
        uses: lukka/get-cmake@v3.17.1

      - name: Prepare Environment
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.env-bit }}.bat"
        shell: cmd

#       TODO: Waiting for Upstream Issue: https://github.com/actions/setup-python/issues/86
#       To pull in debug binaries and stdlib
#       TODO: Added another Upstream issue: https://github.com/actions/virtual-environments/issues/786
#       To add it directly to the `hostedtoolcache` of github workflow environments
#      - name: Set up Python
#        uses: actions/setup-python@v1.2.0
#        with:
#          python-version: ${{ matrix.python-version }}

      - name: Download Python
        uses: carlosperate/download-file-action@v1.0.3
        id: download-python
        with:
         file-url: 'https://www.python.org/ftp/python/${{ matrix.python-version }}/python-${{ matrix.python-version }}-${{ matrix.python-platform }}.exe'
         file-name: 'python-${{ matrix.python-version }}-${{ matrix.python-platform }}.exe'
         location: '${{ runner.workspace }}\dl\'
        if: steps.cache-python.outputs.cache-hit != 'true'

#      - name: Print downloaded the file path
#        run: echo "The file was downloaded to ${{ steps.download-python.outputs.file-path }}"
#        shell: cmd
#        if: steps.cache-python.outputs.cache-hit != 'true'

      - name: Install Python debug (x64) # we need debug binaries and precompiled standard libraries
        run: |
          Start-Process -FilePath "${{ runner.workspace }}\dl\python-${{ matrix.python-version }}-${{ matrix.python-platform }}.exe" -ArgumentList "/quiet Include_debug=1 Include_dev=1 Include_lib=1 Include_pip=1 PrependPath=1 CompileAll=1 InstallAllUsers=0 TargetDir=${{ env.PYTHON_INSTALL_DIR }}\" -Verb runas -Wait
        if: matrix.arch == 'x64' && steps.cache-python.outputs.cache-hit != 'true'
        shell: pwsh

#      - name: Show directory tree (DEBUG)
#        run: Get-ChildItem -Path "${{ env.PYTHON_INSTALL_DIR }}\"
#        shell: pwsh

      - name: Display Python version
        run: ${{ env.PYTHON_INSTALL_DIR }}\python.exe -c "import sys; print(sys.version)"
        shell: cmd

      - name: Upgrade Python pip
        run: |
          ${{ env.PYTHON_INSTALL_DIR }}\python.exe -m pip install --upgrade pip
        shell: cmd

      - name: Install Python dependencies
        run: ${{ env.PYTHON_INSTALL_DIR }}\Scripts\pip.exe install -r ".github/workflows-support/requirements.txt"
        if: steps.cache-python.outputs.cache-hit != 'true'

      - name: Upgrade Python dependencies
        run: ${{ env.PYTHON_INSTALL_DIR }}\Scripts\pip.exe install --upgrade -r ".github/workflows-support/requirements.txt"
        if: steps.cache-python.outputs.cache-hit == 'true'

      - name: Install Qt (x64)
        uses: jurplel/install-qt-action@v2.6.2
        with:
          host: 'windows'
          version: '${{ env.QT_INSTALL_VERSION }}'
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
          arch: ${{ matrix.qt64 }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
        if: matrix.arch == 'x64'

      - name: Install Qt (x86)
        uses: jurplel/install-qt-action@v2.6.2
        with:
          host: 'windows'
          version: '${{ env.QT_INSTALL_VERSION }}'
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
          arch: ${{ matrix.qt32 }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
        if: matrix.arch == 'Win32'

      - name: Install Vcpkg dependencies
        uses: lukka/run-vcpkg@v2.1
        with:
          vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
          vcpkgTriplet: '${{ matrix.triplet }}'
          vcpkgGitCommitId: '${{ env.vcpkgGitCommitID }}'
          vcpkgDirectory: '${{ runner.workspace }}\deps\vcpkg'
          cleanAfterBuild: 'true'
          appendedCacheKey: '${{ hashFiles(env.vcpkgResponseFile) }}'
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'

      - name: Install dependencies with Chocolatey
        uses: crazy-max/ghaction-chocolatey@v1.1.0
        with:
          args: install winflexbison3
        if: ${{ steps.cache-choco.outputs.cache-hit }} != true

      - name:  Show environment settings
        run: |
          Set-PSDebug -Trace 1
          systeminfo
          gci env:
          Set-PSDebug -Trace 0
        shell: pwsh

      - name: Generate build files & run build procedure (x64)
        uses: lukka/run-cmake@v2.3
        env:
          CMAKE_VERBOSE_MAKEFILE: TRUE
          PATH: '${{ env.PYTHON_INSTALL_DIR }}; ${{ env.PYTHON_INSTALL_DIR }}\Scripts; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64; ${env:PATH}'
        with:
          useVcpkgToolchainFile: true
          cmakeSettingsJsonPath: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}\CMakeLists.txt'
          buildDirectory: '${{ runner.workspace }}\build-openage'
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Debug -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -DPYTHON_DIR="${{ env.PYTHON_INSTALL_DIR }}\"  -DCMAKE_PREFIX_PATH=${Qt5_DIR} -DDOWNLOAD_NYAN=YES -DFLEX_EXECUTABLE=C:\ProgramData\chocolatey\lib\winflexbison3\tools\win_flex.exe'
          cmakeGenerator: 'VS16Win${{ matrix.env-bit }}'
          buildWithCMake: true
          buildWithCMakeArgs: '--config Debug -- -j2 /nologo /m /v:m'


#      - name: Run tests
#        run: |
#          ${{ runner.workspace }}/build-openage/RelWithDebInfo/

#      - name: Show directory tree (DEBUG)
#        run: Get-ChildItem -Path "${{ runner.workspace }}\build-openage"
#        shell: pwsh
