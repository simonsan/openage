name: Windows builds
on: [push, pull_request]
env:
  QT_INSTALL_VERSION: '5.14.2'
  vcpkgResponseFile: '${{ github.workspace }}\.github\workflows-support\response_file.txt'
  vcpkgGitCommitID: '28ab0b15cd7cdc1004cac9a28a5ecab198c161b9'      # Updated 26/04/2020
  nyanGitCommitID: '03a996994b87803b5a8ff6ed0e85ab730163aa2d'       # Updated 27/04/2020
  CI_CFG_VERSION: 'github-0.1.0-dev'

jobs:
  build_windows_msys2:
    name: ${{ matrix.conf.compiler }} ${{ matrix.conf.bits }}-bit
    runs-on: windows-latest
    strategy:
      # Because Clang depends on GCC, we run the Clang-64bit job
      # first to create combined caches that include both Clang and GCC.
      # Running 1-job at once ensure the GCC jobs start after Clang.
      max-parallel: 1
      fail-fast: false
      matrix:
        conf:
          - compiler: Clang
            bits: 64
            arch: x86_64
            max_warnings: 0
#          - compiler: GCC
#            bits: 64
#            arch: x86_64
#            max_warnings: 0
    env:
      CHERE_INVOKING:  yes
      CCACHE_DIR:      "${{ github.workspace }}/.ccache"
      CCACHE_MAXSIZE:  "64M"
      CCACHE_COMPRESS: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache (msys)
        uses: actions/cache@v1.1.2
        id: cache-msys2
        with:
          #          path: 'C:/tools/msys64'
          path: '${{ runner.temp }}/msys'
          key: ${{ runner.os }}-msys2-cache-v${{ hashFiles('.github/workflows-support/pkglist.txt') }}

      - name: Cache (nyan)
        uses: actions/cache@v1.1.2
        id: cache-nyan-msys
        with:
          path: '${{ runner.workspace }}\msys-deps\nyan\'
          key: ${{ runner.os }}-NyanCache-msys-CommitHash${{ env.nyanGitCommitID }}

#      - name: Get Date
#        id:   get-date
#        shell: bash
#        run: echo "::set-output name=date::$(date +%Y-%W)"

#      - name:  Install MSYS2
#        run:   choco install msys2 --no-progress
#        if:    steps.cache-msys2.outputs.cache-hit != 'true'

#      - name:  Install C++ compiler and libraries
#        shell: python .github/workflows-support/msys-bash.py {0}
#        run:   echo "pacman -S --needed - < .github/workflows-support/pkglist.txt"
#        if:    steps.cache-msys2.outputs.cache-hit != 'true'

#flex gcc-libs git gzip make mingw-w64-x86_64-ccache mingw-w64-x86_64-clang mingw-w64-x86_64-clang-analyzer mingw-w64-x86_64-clang-tools-extra mingw-w64-x86_64-cmake mingw-w64-x86_64-cython mingw-w64-x86_64-dlfcn mingw-w64-x86_64-eigen3 mingw-w64-x86_64-fontconfig mingw-w64-x86_64-freetype mingw-w64-x86_64-gdb mingw-w64-x86_64-harfbuzz mingw-w64-x86_64-libepoxy mingw-w64-x86_64-libogg mingw-w64-x86_64-libpng mingw-w64-x86_64-make mingw-w64-x86_64-opus mingw-w64-x86_64-opusfile mingw-w64-x86_64-python mingw-w64-x86_64-python-jinja mingw-w64-x86_64-python-numpy mingw-w64-x86_64-python-pillow mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-pygments mingw-w64-x86_64-python-pyreadline mingw-w64-x86_64-qt5 mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-ttf-dejavu ncurses

#      - name:  Install C++ compiler and libraries
#        shell: C:\tools\msys64\usr\bin\bash.exe -lc {0}
#        run: pacman -S --needed - < .github/workflows-support/pkglist.txt
#        if:    steps.cache-msys2.outputs.cache-hit != 'true'

      - uses: eine/setup-msys2@v0
        with:
          msystem: MINGW64
          update: true
        if: steps.cache-msys2.outputs.cache-hit != 'true'

      - name: Update
        shell: msys2 {0}
        run: |
          uname -a
          pacman -Syuu --noconfirm
        if: steps.cache-msys2.outputs.cache-hit != 'true'

      - name: Install dependencies
        shell: msys2 {0}
        run: |
          pacman -Syu --noconfirm --needed flex gcc-libs git gzip make mingw-w64-x86_64-ccache \
          mingw-w64-x86_64-clang mingw-w64-x86_64-clang-analyzer mingw-w64-x86_64-clang-tools-extra \
          mingw-w64-x86_64-cmake mingw-w64-x86_64-cython mingw-w64-x86_64-dlfcn mingw-w64-x86_64-eigen3 \
          mingw-w64-x86_64-fontconfig mingw-w64-x86_64-freetype mingw-w64-x86_64-gdb mingw-w64-x86_64-harfbuzz \
          mingw-w64-x86_64-libepoxy mingw-w64-x86_64-libogg mingw-w64-x86_64-libpng mingw-w64-x86_64-make \
          mingw-w64-x86_64-opus mingw-w64-x86_64-opusfile mingw-w64-x86_64-python mingw-w64-x86_64-python-jinja \
          mingw-w64-x86_64-python-numpy mingw-w64-x86_64-python-pillow mingw-w64-x86_64-python-pip \
          mingw-w64-x86_64-python-pygments mingw-w64-x86_64-python-pyreadline mingw-w64-x86_64-qt5 \
          mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-ttf-dejavu ncurses \
          mingw-w64-x86_64-libc++ mingw-w64-x86_64-libc++abi
        if: steps.cache-msys2.outputs.cache-hit != 'true'

      # TODO: Make second path dynamic + linux style paths
      - name: Copy Script to MSYS2
        shell: bash
        run: |
          cp .github/workflows-support/shrink-msys2.sh d:/a/_temp/msys/msys64/shrink-msys2.sh
        if: steps.cache-msys2.outputs.cache-hit != 'true'

      - name: Set mingw bin path
        shell: msys2 {0}
        run: |
          echo "export PATH=/mingw64/bin:mingw64\x86_64-w64-mingw32\bin:$PATH" >> ~/.bashrc
          source ~/.bashrc
        if: steps.cache-msys2.outputs.cache-hit != 'true'

# TODO: Activate later, now save time
#      - name: Shrink MSYS2 for caching
#        shell: msys2 {0}
#        run: |
#          echo "export PATH=/mingw64/bin:mingw64\x86_64-w64-mingw32\bin:$PATH" >> ~/.bashrc
#          source ~/.bashrc
#          cd /
#          ./shrink-msys2.sh
#        if: steps.cache-msys2.outputs.cache-hit != 'true'

      - name: Clone nyan repository
        run: |
          git clone https://github.com/SFTtech/nyan.git ${{ runner.workspace }}\msys-deps\
          cd ${{ runner.workspace }}\msys-deps\nyan\
          git reset --hard ${{ env.nyanGitCommitID }}
        if: steps.cache-nyan-msys.outputs.cache-hit != 'true'

      - name: Configure nyan
        run: |
          msys2do cd \msys-deps\nyan
          msys2do mkdir build
          msys2do cd build
          msys2do cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_MAKE_PROGRAM=mingw32-make -DFLEX_EXECUTABLE=/usr/bin/flex.exe -G "CodeBlocks - MinGW Makefiles" ..
        env:
          MSYS2_PATH_TYPE: inherit

      - name: Build nyan
        shell: cmd
        run: |
          cd \msys-deps\nyan
          cd build
          mingw32-make -j2 VERBOSE=1

#      - name: Configure openage
#        shell: msys2 {0}
#        run: |
#
#      - name: Build openage
#        shell: cmd
#        run: |
